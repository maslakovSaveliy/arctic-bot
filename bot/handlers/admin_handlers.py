"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
"""

import logging
import json
from datetime import datetime, timedelta
from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text, IDFilter
import pytz

from bot.config.config import ADMIN_USER_IDS
from bot.database import (
    get_all_users, 
    get_users_by_filter, 
    get_all_invite_links
)
from bot.services.invite_links import generate_invite_link
from bot.services.notifications import send_broadcast, schedule_broadcast
from bot.utils.statistics import send_statistics_excel, send_active_users_statistics_excel

class BroadcastStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    waiting_for_message = State()
    waiting_for_scheduled_message = State()  # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    waiting_for_media = State()              # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    waiting_for_scheduled_media = State()    # –û–∂–∏–¥–∞–Ω–∏–µ –º–µ–¥–∏–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    waiting_for_target = State()
    waiting_for_scheduled_target = State()   # –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –≤ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ
    waiting_for_confirmation = State()
    waiting_for_schedule_time = State()
    waiting_for_schedule_confirmation = State()

class InviteLinkStates(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    """
    waiting_for_source = State()
    waiting_for_description = State()
    waiting_for_expire_date = State()

async def admin_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    """
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
        "üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É",
        "üì® –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
        "üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"
    ]
    keyboard.add(*buttons)
    
    await message.answer(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def show_statistics(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    all_users = await get_all_users()
    active_users = await get_all_users(status="active")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
    sources = {}
    for user in active_users:
        source = user.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if source not in sources:
            sources[source] = 0
        sources[source] += 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
    text += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_users)}\n"
    text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(active_users)}\n\n"
    
    text += "*–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:*\n"
    for source, count in sources.items():
        text += f"- {source}: {count}\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    invite_links = await get_all_invite_links()
    
    text += f"\n*–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:* {len(invite_links)}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è Excel-—Ñ–∞–π–ª–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å EXCEL —Ñ–∞–π–ª", callback_data="get_excel_stats"))
    
    await message.answer(text, parse_mode=types.ParseMode.MARKDOWN, reply_markup=keyboard)

async def process_excel_stats_request(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    await callback_query.answer()
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("üìä –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)", callback_data="get_excel_all"))
    keyboard.add(types.InlineKeyboardButton("üìä –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="get_excel_active"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –±–æ–ª—å—à–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –≤ –±–∞–∑–µ –æ–∫–æ–ª–æ 6500 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, "
        "–ø–æ—ç—Ç–æ–º—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è:", 
        reply_markup=keyboard
    )

async def process_excel_all_users(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    await callback_query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await callback_query.message.answer(
        "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É Excel-—Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª
    await send_statistics_excel(callback_query.message)

async def process_excel_active_users(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    await callback_query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel-—Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    await send_active_users_statistics_excel(callback_query.message)

async def create_invite_link_cmd(message: types.Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Instagram', 'Facebook', '–°–∞–π—Ç' –∏ —Ç.–¥.):")
    await InviteLinkStates.waiting_for_source.set()

async def process_invite_link_source(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    """
    async with state.proxy() as data:
        data["source"] = message.text
    
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–∫–∏ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç', –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):")
    await InviteLinkStates.waiting_for_description.set()

async def process_invite_link_description(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    """
    async with state.proxy() as data:
        if message.text.lower() not in ["–Ω–µ—Ç", "no", "-", "n"]:
            data["description"] = message.text
        else:
            data["description"] = None
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –≤ –¥–Ω—è—Ö (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '0', –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –∏—Å—Ç–µ–∫–∞—Ç—å):"
    )
    await InviteLinkStates.waiting_for_expire_date.set()

async def process_invite_link_expire_date(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É
    """
    try:
        days = int(message.text)
        
        async with state.proxy() as data:
            if days > 0:
                data["expire_date"] = datetime.now() + timedelta(days=days)
            else:
                data["expire_date"] = None
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        link_data = await generate_invite_link(
            bot=message.bot,
            source=data["source"],
            created_by=message.from_user.id,
            expire_date=data.get("expire_date"),
            member_limit=None,
            description=data.get("description")
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = "üîó *–ù–æ–≤–∞—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:*\n\n"
        text += f"–°—Å—ã–ª–∫–∞: {link_data['invite_link']}\n"
        text += f"–ò—Å—Ç–æ—á–Ω–∏–∫: {link_data['source']}\n"
        
        if link_data.get("description"):
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {link_data['description']}\n"
        
        if link_data.get("expires_at"):
            text += f"–ò—Å—Ç–µ–∫–∞–µ—Ç: {link_data['expires_at']}\n"
        
        await message.answer(text, parse_mode=types.ParseMode.MARKDOWN)
        await state.finish()
    
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

async def create_broadcast_cmd(message: types.Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await BroadcastStates.waiting_for_message.set()

async def process_broadcast_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    async with state.proxy() as data:
        data["message_text"] = message.text
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ë–µ–∑ –º–µ–¥–∏–∞", callback_data="media_none"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="media_photo"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="media_video"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å GIF", callback_data="media_animation"))
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?", 
        reply_markup=keyboard
    )
    await BroadcastStates.waiting_for_media.set()

async def process_broadcast_media_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    await callback_query.answer()
    
    choice = callback_query.data
    
    if choice == "media_none":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        await show_target_selection(callback_query.message, state)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞
        media_type = choice.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º photo, video –∏–ª–∏ animation
        async with state.proxy() as data:
            data["media_type"] = media_type
        
        # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª
        media_type_text = {
            "photo": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
            "video": "–≤–∏–¥–µ–æ",
            "animation": "GIF-–∞–Ω–∏–º–∞—Ü–∏—é"
        }.get(media_type, "–º–µ–¥–∏–∞-—Ñ–∞–π–ª")
        
        await callback_query.message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_type_text} –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")

async def process_broadcast_media(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞-—Ñ–∞–π–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    async with state.proxy() as data:
        media_type = data.get("media_type")
        
        if media_type == "photo" and message.photo:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
            data["media"] = message.photo[-1].file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {data['media']}")
        elif media_type == "video" and message.video:
            data["media"] = message.video.file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {data['media']}")
        elif media_type == "animation" and message.animation:
            data["media"] = message.animation.file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ GIF-–∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏: {data['media']}")
        else:
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø.")
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    await show_target_selection(message, state)

async def show_target_selection(message, state: FSMContext, page=0, filter_type="source"):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–ª–±—ç–∫
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        filter_type (str): –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ ("source" –∏–ª–∏ "city")
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞
    filters = {}
    active_users = await get_all_users(status="active")
    
    # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user in active_users:
        filter_value = user.get(filter_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        if filter_value not in filters:
            filters[filter_value] = 0
        filters[filter_value] += 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_filters = sorted(filters.items(), key=lambda x: x[1], reverse=True)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    FILTERS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = max(1, (len(sorted_filters) + FILTERS_PER_PAGE - 1) // FILTERS_PER_PAGE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_needed = len(sorted_filters) > FILTERS_PER_PAGE
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    page = max(0, min(page, total_pages - 1))
    
    # –í—ã–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * FILTERS_PER_PAGE
    end_idx = min(start_idx + FILTERS_PER_PAGE, len(sorted_filters))
    current_page_filters = sorted_filters[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page == 0:
        keyboard.add(types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="target_all"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–≤
    for filter_value, count in current_page_filters:
        if filter_value:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞
            keyboard.add(types.InlineKeyboardButton(
                f"{filter_value} ({count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)", 
                callback_data=f"target_{filter_type}_{filter_value}"
            ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if pagination_needed:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"target_page_{filter_type}_{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_info = f"{page+1}/{total_pages}"
        nav_buttons.append(types.InlineKeyboardButton(page_info, callback_data="target_page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"target_page_{filter_type}_{page+1}"))
            
        keyboard.row(*nav_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    if filter_type == "source":
        keyboard.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–ª—å—Ç—Ä—É –ø–æ –≥–æ—Ä–æ–¥–∞–º", callback_data="target_switch_city"))
    else:
        keyboard.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ñ–∏–ª—å—Ç—Ä—É –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="target_switch_source"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    message_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    if isinstance(message, types.Message):
        await message.answer(message_text, reply_markup=keyboard)
    else:
        await message.edit_text(message_text, reply_markup=keyboard)
    
    await BroadcastStates.waiting_for_target.set()

async def process_target_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    """
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞
    page_data = callback_query.data
    if page_data == "target_page_info":
        # –≠—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –§–æ—Ä–º–∞—Ç: "target_page_{filter_type}_{page}"
    parts = page_data.split("_")
    if len(parts) >= 4:
        filter_type = parts[2]  # "source" –∏–ª–∏ "city"
        page = int(parts[3])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        await show_target_selection(callback_query.message, state, page, filter_type)
    else:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–±–µ–∑ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞)
        page = int(page_data.split("_")[2])
        await show_target_selection(callback_query.message, state, page)

async def process_target_filter_switch(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∏—Å—Ç–æ—á–Ω–∏–∫–∏/–≥–æ—Ä–æ–¥–∞)
    """
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
    if callback_query.data == "target_switch_city":
        filter_type = "city"
    else:
        filter_type = "source"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å –Ω–æ–≤—ã–º —Ç–∏–ø–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    await show_target_selection(callback_query.message, state, 0, filter_type)

async def process_broadcast_target(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await callback_query.answer()
    
    target_data = callback_query.data
    target_filter = None
    target_description = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    
    if target_data.startswith("target_source_"):
        source = target_data[14:]  # –í—ã—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "target_source_"
        target_filter = {"source": source}
        target_description = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source}'"
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source}'")
    elif target_data.startswith("target_city_"):
        city = target_data[12:]  # –í—ã—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "target_city_"
        target_filter = {"city": city}
        target_description = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –≥–æ—Ä–æ–¥–∞ '{city}'"
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞ '{city}'")
    elif target_data.startswith("target_switch_"):
        # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ process_target_filter_switch
        return
    else:
        logging.info("–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    async with state.proxy() as data:
        data["target_filter"] = target_filter
        data["target_description"] = target_description
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if target_filter:
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "active"
            combined_filter = target_filter.copy()
            combined_filter["status"] = "active"
            users = await get_users_by_filter(combined_filter)
        else:
            users = await get_all_users(status="active")
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {target_filter}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_message = (
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {target_description} "
            f"(–≤—Å–µ–≥–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π):\n\n"
            f"{data['message_text']}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "media" in data and "media_type" in data:
            media_type_text = {
                "photo": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
                "video": "–≤–∏–¥–µ–æ",
                "animation": "GIF-–∞–Ω–∏–º–∞—Ü–∏–µ–π"
            }.get(data["media_type"], "–º–µ–¥–∏–∞")
            
            confirmation_message += f"\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å {media_type_text}."
        
        confirmation_message += "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É (–¥–∞/–Ω–µ—Ç):"
    
    await callback_query.message.answer(confirmation_message)
    await BroadcastStates.waiting_for_confirmation.set()

async def process_broadcast_confirmation(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    if message.text.lower() in ["–¥–∞", "yes", "y", "–¥"]:
        async with state.proxy() as data:
            message_text = data["message_text"]
            target_filter = data.get("target_filter")
            target_description = data.get("target_description", "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            media = data.get("media")
            media_type = data.get("media_type")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ {target_description} –Ω–∞—á–∞—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å –º–µ–¥–∏–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        stats = await send_broadcast(
            bot=message.bot, 
            message_text=message_text, 
            target_filter=target_filter,
            media=media,
            media_type=media_type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        result_message = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['sent']}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {stats['failed']}"
        )
        
        await message.answer(result_message)
    else:
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    await state.finish()

async def schedule_broadcast_cmd(message: types.Message):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await BroadcastStates.waiting_for_scheduled_message.set()

async def process_scheduled_broadcast_message(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    async with state.proxy() as data:
        data["message_text"] = message.text
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞ (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –æ–±—ã—á–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ)
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–ë–µ–∑ –º–µ–¥–∏–∞", callback_data="schedule_media_none"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="schedule_media_photo"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="schedule_media_video"))
    keyboard.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å GIF", callback_data="schedule_media_animation"))
    
    await message.answer(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç –∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ?", 
        reply_markup=keyboard
    )
    await BroadcastStates.waiting_for_scheduled_media.set()

async def process_scheduled_broadcast_media_choice(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await callback_query.answer()
    
    choice = callback_query.data
    
    if choice == "schedule_media_none":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
        await show_scheduled_target_selection(callback_query.message, state)
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞
        media_type = choice.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º photo, video –∏–ª–∏ animation
        async with state.proxy() as data:
            data["media_type"] = media_type
        
        # –ü—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª
        media_type_text = {
            "photo": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é",
            "video": "–≤–∏–¥–µ–æ",
            "animation": "GIF-–∞–Ω–∏–º–∞—Ü–∏—é"
        }.get(media_type, "–º–µ–¥–∏–∞-—Ñ–∞–π–ª")
        
        await callback_query.message.answer(f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {media_type_text} –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")

async def process_scheduled_broadcast_media(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞-—Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    async with state.proxy() as data:
        media_type = data.get("media_type")
        
        if media_type == "photo" and message.photo:
            # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ)
            data["media"] = message.photo[-1].file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {data['media']}")
        elif media_type == "video" and message.video:
            data["media"] = message.video.file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {data['media']}")
        elif media_type == "animation" and message.animation:
            data["media"] = message.animation.file_id
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ GIF-–∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {data['media']}")
        else:
            await message.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–ø—É –º–µ–¥–∏–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø.")
            return
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    await show_scheduled_target_selection(message, state)

async def show_scheduled_target_selection(message, state: FSMContext, page=0, filter_type="source"):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–ª–ª–±—ç–∫
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        page (int): –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
        filter_type (str): –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ ("source" –∏–ª–∏ "city")
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
    active_users = await get_all_users(status="active")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å (–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–ª–∏ –≥–æ—Ä–æ–¥–∞)
    if filter_type == "source":
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        items = {}
        for user in active_users:
            item_value = user.get("source", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if item_value not in items:
                items[item_value] = 0
            items[item_value] += 1
        
        title = "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º):"
        callback_prefix = "schedule_target_source_"
    else:  # filter_type == "city"
        # –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        items = {}
        for user in active_users:
            item_value = user.get("city", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            if item_value not in items:
                items[item_value] = 0
            items[item_value] += 1
        
        title = "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (–ø–æ –≥–æ—Ä–æ–¥–∞–º):"
        callback_prefix = "schedule_target_city_"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
    sorted_items = sorted(items.items(), key=lambda x: x[1], reverse=True)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    ITEMS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = max(1, (len(sorted_items) + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    pagination_needed = len(sorted_items) > ITEMS_PER_PAGE
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    page = max(0, min(page, total_pages - 1))
    
    # –í—ã–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * ITEMS_PER_PAGE
    end_idx = min(start_idx + ITEMS_PER_PAGE, len(sorted_items))
    current_page_items = sorted_items[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup()
    
    # –¢–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –≥–æ—Ä–æ–¥–∞–º–∏
    if page == 0:
        row_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        keyboard.add(types.InlineKeyboardButton("–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="schedule_target_all"))
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –≥–æ—Ä–æ–¥–∞–º–∏
        if filter_type == "source":
            row_buttons.append(types.InlineKeyboardButton("üìç –ü–æ –≥–æ—Ä–æ–¥–∞–º", callback_data="schedule_target_switch_city"))
        else:
            row_buttons.append(types.InlineKeyboardButton("üîó –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º", callback_data="schedule_target_switch_source"))
        
        keyboard.row(*row_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–ª–∏ –≥–æ—Ä–æ–¥–æ–≤)
    for item, count in current_page_items:
        if item:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            button_text = f"{item} ({count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)"
            callback_data = f"{callback_prefix}{item}"
            keyboard.add(types.InlineKeyboardButton(button_text, callback_data=callback_data))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    if pagination_needed:
        nav_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        if page > 0:
            nav_buttons.append(types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"schedule_target_page_{filter_type}_{page-1}"))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        page_info = f"{page+1}/{total_pages}"
        nav_buttons.append(types.InlineKeyboardButton(page_info, callback_data="schedule_target_page_info"))
        
        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥"
        if page < total_pages - 1:
            nav_buttons.append(types.InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"schedule_target_page_{filter_type}_{page+1}"))
            
        keyboard.row(*nav_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
    if isinstance(message, types.Message):
        await message.answer(title, reply_markup=keyboard)
    else:
        await message.edit_text(title, reply_markup=keyboard)
    
    await BroadcastStates.waiting_for_scheduled_target.set()

async def process_scheduled_target_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–ª–±—ç–∫–∞
    page_data = callback_query.data
    if page_data == "schedule_target_page_info":
        # –≠—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –§–æ—Ä–º–∞—Ç: "schedule_target_page_{filter_type}_{page}"
    parts = page_data.split("_")
    if len(parts) >= 5:
        filter_type = parts[3]  # "source" –∏–ª–∏ "city"
        page = int(parts[4])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
        await show_scheduled_target_selection(callback_query.message, state, page, filter_type)
    else:
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (–±–µ–∑ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞)
        page = int(page_data.split("_")[3])
        await show_scheduled_target_selection(callback_query.message, state, page)

async def process_scheduled_target_filter_switch(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∏—Å—Ç–æ—á–Ω–∏–∫–∏/–≥–æ—Ä–æ–¥–∞) –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await callback_query.answer()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
    if callback_query.data == "schedule_target_switch_city":
        filter_type = "city"
    else:
        filter_type = "source"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å –Ω–æ–≤—ã–º —Ç–∏–ø–æ–º —Ñ–∏–ª—å—Ç—Ä–∞
    await show_scheduled_target_selection(callback_query.message, state, 0, filter_type)

async def process_scheduled_broadcast_target(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    await callback_query.answer()
    
    target_data = callback_query.data
    target_filter = None
    target_description = "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    
    if target_data.startswith("schedule_target_source_"):
        source = target_data[22:]  # –í—ã—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "schedule_target_source_"
        target_filter = {"source": source}
        target_description = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source}'"
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ '{source}'")
    elif target_data.startswith("schedule_target_city_"):
        city = target_data[20:]  # –í—ã—Ä–µ–∑–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "schedule_target_city_"
        target_filter = {"city": city}
        target_description = f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –≥–æ—Ä–æ–¥–∞ '{city}'"
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏–∑ –≥–æ—Ä–æ–¥–∞ '{city}'")
    elif target_data.startswith("schedule_target_switch_"):
        # –≠—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ process_scheduled_target_filter_switch
        return
    else:
        logging.info("–í—ã–±—Ä–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
    
    async with state.proxy() as data:
        data["target_filter"] = target_filter
        data["target_description"] = target_description
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
        if target_filter:
            # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "active"
            combined_filter = target_filter.copy()
            combined_filter["status"] = "active"
            users = await get_users_by_filter(combined_filter)
        else:
            users = await get_all_users(status="active")
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º: {target_filter}")
    
    # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    await callback_query.message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è {target_description} (–≤—Å–µ–≥–æ {len(users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π).\n\n"
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2023 15:30"
    )
    
    await BroadcastStates.waiting_for_schedule_time.set()

async def process_schedule_time(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        schedule_time = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        moscow_tz = pytz.timezone('Europe/Moscow')
        current_time_moscow = datetime.now(pytz.UTC).astimezone(moscow_tz).replace(tzinfo=None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º)
        if schedule_time <= current_time_moscow:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è). –¢–µ–∫—É—â–µ–µ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è: " + 
                                current_time_moscow.strftime('%d.%m.%Y %H:%M') + ". –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        async with state.proxy() as data:
            data["schedule_time"] = schedule_time
            target_description = data.get("target_description", "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            target_filter = data.get("target_filter")
            if target_filter:
                # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "active"
                combined_filter = target_filter.copy()
                combined_filter["status"] = "active"
                users = await get_users_by_filter(combined_filter)
            else:
                users = await get_all_users(status="active")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            confirmation_message = (
                f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {target_description} "
                f"(–≤—Å–µ–≥–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –Ω–∞ {schedule_time.strftime('%d.%m.%Y –≤ %H:%M')} (–ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏):\n\n"
                f"{data['message_text']}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
            if "media" in data and "media_type" in data:
                media_type_text = {
                    "photo": "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
                    "video": "–≤–∏–¥–µ–æ",
                    "animation": "GIF-–∞–Ω–∏–º–∞—Ü–∏–µ–π"
                }.get(data["media_type"], "–º–µ–¥–∏–∞")
                
                confirmation_message += f"\n\n–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å {media_type_text}."
            
            confirmation_message += "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–∞/–Ω–µ—Ç):"
        
        await message.answer(confirmation_message)
        await BroadcastStates.waiting_for_schedule_confirmation.set()
    
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç '–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú' (–ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏), –Ω–∞–ø—Ä–∏–º–µ—Ä: 31.12.2023 15:30"
        )

async def process_schedule_confirmation(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    if message.text.lower() in ["–¥–∞", "yes", "y", "–¥"]:
        async with state.proxy() as data:
            message_text = data["message_text"]
            schedule_time = data["schedule_time"]
            target_filter = data.get("target_filter")
            target_description = data.get("target_description", "–≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            media = data.get("media")
            media_type = data.get("media_type")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        broadcast_id = await schedule_broadcast(
            bot=message.bot,
            message_text=message_text,
            schedule_time=schedule_time,
            target_filter=target_filter,
            media=media,
            media_type=media_type
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        result_message = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {target_description} "
            f"{schedule_time.strftime('%d.%m.%Y –≤ %H:%M')} (–ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)\n\n"
            f"ID —Ä–∞—Å—Å—ã–ª–∫–∏: {broadcast_id}"
        )
        
        await message.answer(result_message)
    else:
        await message.answer("–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    
    await state.finish()

def register_admin_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        dp (Dispatcher): Dispatcher –æ–±—ä–µ–∫—Ç
    """
    # –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admin_filter = IDFilter(user_id=ADMIN_USER_IDS)
    
    # –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.register_message_handler(admin_start, admin_filter, commands=["admin"], state="*")
    dp.register_message_handler(show_statistics, admin_filter, Text(equals="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), state="*")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    dp.register_message_handler(create_invite_link_cmd, admin_filter, Text(equals="üîó –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É"), state="*")
    dp.register_message_handler(process_invite_link_source, admin_filter, state=InviteLinkStates.waiting_for_source)
    dp.register_message_handler(process_invite_link_description, admin_filter, state=InviteLinkStates.waiting_for_description)
    dp.register_message_handler(process_invite_link_expire_date, admin_filter, state=InviteLinkStates.waiting_for_expire_date)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
    dp.register_message_handler(create_broadcast_cmd, admin_filter, Text(equals="üì® –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), state="*")
    dp.register_message_handler(process_broadcast_message, admin_filter, state=BroadcastStates.waiting_for_message)
    dp.register_callback_query_handler(process_broadcast_media_choice, admin_filter, 
                                      lambda c: c.data.startswith("media_"), 
                                      state=BroadcastStates.waiting_for_media)
    dp.register_message_handler(process_broadcast_media, admin_filter, 
                               content_types=types.ContentTypes.ANY,
                               state=BroadcastStates.waiting_for_media)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    dp.register_callback_query_handler(process_target_pagination, admin_filter, 
                                      lambda c: c.data.startswith("target_page_"), 
                                      state=BroadcastStates.waiting_for_target)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ (–∏—Å—Ç–æ—á–Ω–∏–∫–∏/–≥–æ—Ä–æ–¥–∞)
    dp.register_callback_query_handler(process_target_filter_switch, admin_filter, 
                                      lambda c: c.data.startswith("target_switch_"), 
                                      state=BroadcastStates.waiting_for_target)
    dp.register_callback_query_handler(process_broadcast_target, admin_filter, 
                                      lambda c: c.data.startswith("target_") and not c.data.startswith("target_page_") and not c.data.startswith("target_switch_"), 
                                      state=BroadcastStates.waiting_for_target)
    dp.register_message_handler(process_broadcast_confirmation, admin_filter, state=BroadcastStates.waiting_for_confirmation)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
    dp.register_message_handler(schedule_broadcast_cmd, admin_filter, Text(equals="üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"), state="*")
    dp.register_message_handler(process_scheduled_broadcast_message, admin_filter, 
                               state=BroadcastStates.waiting_for_scheduled_message)
    dp.register_callback_query_handler(process_scheduled_broadcast_media_choice, admin_filter, 
                                      lambda c: c.data.startswith("schedule_media_"), 
                                      state=BroadcastStates.waiting_for_scheduled_media)
    dp.register_message_handler(process_scheduled_broadcast_media, admin_filter, 
                               content_types=types.ContentTypes.ANY,
                               state=BroadcastStates.waiting_for_scheduled_media)
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    dp.register_callback_query_handler(process_scheduled_target_pagination, admin_filter, 
                                      lambda c: c.data.startswith("schedule_target_page_"), 
                                      state=BroadcastStates.waiting_for_scheduled_target)
    dp.register_callback_query_handler(process_scheduled_target_filter_switch, admin_filter, 
                                      lambda c: c.data.startswith("schedule_target_switch_"), 
                                      state=BroadcastStates.waiting_for_scheduled_target)
    dp.register_callback_query_handler(process_scheduled_broadcast_target, admin_filter, 
                                      lambda c: c.data.startswith("schedule_target_") and not c.data.startswith("schedule_target_page_") and not c.data.startswith("schedule_target_switch_"), 
                                      state=BroadcastStates.waiting_for_scheduled_target)
    dp.register_message_handler(process_schedule_time, admin_filter, state=BroadcastStates.waiting_for_schedule_time)
    dp.register_message_handler(process_schedule_confirmation, admin_filter, state=BroadcastStates.waiting_for_schedule_confirmation)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ Excel-—Ñ–∞–π–ª–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    dp.register_callback_query_handler(process_excel_stats_request, admin_filter, Text(equals="get_excel_stats"), state="*")
    dp.register_callback_query_handler(process_excel_all_users, admin_filter, Text(equals="get_excel_all"), state="*")
    dp.register_callback_query_handler(process_excel_active_users, admin_filter, Text(equals="get_excel_active"), state="*") 